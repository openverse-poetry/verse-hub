<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AnOpenVerseForEveryone | Поэтическая платформа</title>
    <meta name="description" content="Открытая поэтическая платформа для всех авторов. Публикуйте стихи, находите читателей, становитесь популярными.">
    <style>
        /* Все предыдущие стили остаются */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --success-color: #27ae60;
            --gold-color: #f39c12;
            --text-color: #2c3e50;
            --light-bg: #f8f9fa;
            --white: #ffffff;
            --shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        body {
            font-family: 'Georgia', 'Times New Roman', serif;
            line-height: 1.7;
            color: var(--text-color);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .site-header {
            background: linear-gradient(135deg, var(--primary-color), #34495e);
            color: var(--white);
            padding: 20px 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .site-logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo-icon {
            font-size: 2.5em;
        }

        .logo-text {
            display: flex;
            flex-direction: column;
        }

        .site-title {
            font-size: 1.8em;
            font-weight: bold;
            line-height: 1.2;
        }

        .site-subtitle {
            font-size: 0.9em;
            opacity: 0.8;
            font-style: italic;
        }

        .main-nav {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .nav-btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            background: transparent;
            color: var(--white);
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-btn:hover {
            background: rgba(255,255,255,0.1);
            transform: translateY(-2px);
        }

        .nav-btn.active {
            background: var(--secondary-color);
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-left: 20px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--secondary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            cursor: pointer;
            position: relative;
        }

        .user-rating {
            position: absolute;
            bottom: -5px;
            right: -5px;
            background: var(--gold-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.7em;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid white;
        }

        .main-container {
            max-width: 1200px;
            margin: 30px auto;
            background: var(--white);
            border-radius: 20px;
            box-shadow: var(--shadow);
            overflow: hidden;
            min-height: 80vh;
        }

        .content-section {
            display: none;
            animation: fadeInUp 0.6s ease;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .auth-form {
            max-width: 500px;
            margin: 50px auto;
            padding: 40px;
            background: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        .form-title {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 30px;
            font-size: 2em;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: var(--primary-color);
        }

        .form-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            font-family: inherit;
            transition: border-color 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--secondary-color);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            background: var(--secondary-color);
            color: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn-success {
            background: var(--success-color);
        }

        .btn-warning {
            background: #e67e22;
        }

        .btn-danger {
            background: var(--accent-color);
        }

        .btn-info {
            background: #17a2b8;
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 12px;
        }

        .form-footer {
            text-align: center;
            margin-top: 20px;
        }

        .form-link {
            color: var(--secondary-color);
            cursor: pointer;
            text-decoration: underline;
        }

        /* Добавляем стили для синхронизации */
        .sync-section {
            padding: 40px;
            text-align: center;
        }

        .sync-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }

        .sync-card {
            background: var(--light-bg);
            padding: 30px;
            border-radius: 15px;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .sync-card:hover {
            border-color: var(--secondary-color);
            transform: translateY(-5px);
        }

        .sync-icon {
            font-size: 3em;
            margin-bottom: 20px;
        }

        .sync-description {
            color: #666;
            margin: 15px 0;
            line-height: 1.6;
        }

        /* Остальные стили остаются как были */
        .authors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            padding: 40px;
        }

        .author-card {
            background: var(--white);
            border: 2px solid #e9ecef;
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .author-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
            border-color: var(--secondary-color);
        }

        .author-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2.5em;
            font-weight: bold;
            position: relative;
        }

        .author-popularity {
            position: absolute;
            bottom: -5px;
            right: -5px;
            background: var(--gold-color);
            color: white;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            font-weight: bold;
            border: 2px solid white;
        }

        .author-name {
            font-size: 1.4em;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .author-stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 15px 0;
            color: #7f8c8d;
            font-size: 0.9em;
        }

        .author-bio {
            color: #555;
            line-height: 1.6;
            margin-bottom: 15px;
        }

        .poems-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            padding: 40px;
        }

        .poem-card {
            background: var(--white);
            border: 2px solid #e9ecef;
            border-radius: 15px;
            padding: 30px;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .poem-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));
        }

        .poem-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
            border-color: var(--secondary-color);
        }

        .poem-author {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: #7f8c8d;
            font-size: 0.9em;
        }

        .author-avatar-small {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: var(--secondary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.8em;
            font-weight: bold;
        }

        .poem-title {
            font-size: 1.4em;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 15px;
            line-height: 1.3;
        }

        .poem-preview {
            font-size: 1.1em;
            line-height: 1.7;
            color: #555;
            margin-bottom: 20px;
            display: -webkit-box;
            -webkit-line-clamp: 6;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .poem-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9em;
            color: #7f8c8d;
        }

        .poem-stats {
            display: flex;
            gap: 15px;
        }

        .poem-date {
            font-style: italic;
        }

        .poem-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .read-more {
            color: var(--secondary-color);
            font-weight: bold;
            text-decoration: none;
        }

        .rating-badge {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            background: var(--gold-color);
            color: white;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 2000;
            animation: fadeIn 0.3s ease;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--white);
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            animation: scaleIn 0.3s ease;
        }

        @keyframes scaleIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 2em;
            cursor: pointer;
            color: #7f8c8d;
            transition: color 0.3s ease;
        }

        .close-modal:hover {
            color: var(--accent-color);
        }

        .full-poem-title {
            font-size: 2em;
            color: var(--primary-color);
            margin-bottom: 10px;
            padding-right: 40px;
        }

        .poem-author-full {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .full-poem-content {
            font-size: 1.2em;
            line-height: 1.8;
            white-space: pre-wrap;
            color: #333;
            margin-bottom: 20px;
        }

        .poem-popularity {
            background: var(--light-bg);
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }

        .full-poem-date {
            text-align: right;
            color: #7f8c8d;
            font-style: italic;
            border-top: 1px solid #e9ecef;
            padding-top: 20px;
        }

        .top-authors {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 30px;
        }

        .top-author-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: var(--shadow);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .top-author-card.gold {
            border-color: #ffd700;
            background: linear-gradient(135deg, #fff9e6, #ffffff);
        }

        .top-author-card.silver {
            border-color: #c0c0c0;
            background: linear-gradient(135deg, #f8f8f8, #ffffff);
        }

        .top-author-card.bronze {
            border-color: #cd7f32;
            background: linear-gradient(135deg, #fdf3e6, #ffffff);
        }

        .top-author-card:hover {
            transform: translateY(-5px);
        }

        .medal {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .site-footer {
            background: var(--primary-color);
            color: var(--white);
            text-align: center;
            padding: 30px 20px;
            margin-top: 50px;
        }

        .footer-text {
            opacity: 0.8;
            font-size: 0.9em;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            z-index: 3000;
            animation: slideInRight 0.3s ease;
        }

        .notification.success {
            background: var(--success-color);
        }

        .notification.error {
            background: var(--accent-color);
        }

        .notification.info {
            background: var(--secondary-color);
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .my-poems-section {
            padding: 40px;
        }

        .my-poems-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 30px;
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 20px;
            }

            .main-nav {
                flex-wrap: wrap;
                justify-content: center;
            }

            .user-menu {
                margin-left: 0;
                margin-top: 10px;
            }

            .poems-grid,
            .authors-grid {
                grid-template-columns: 1fr;
                padding: 20px;
            }

            .auth-form {
                margin: 20px;
                padding: 20px;
            }

            .poem-actions {
                flex-direction: column;
            }

            .sync-options {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Шапка сайта -->
    <header class="site-header">
        <div class="header-container">
            <div class="site-logo">
                <div class="logo-icon">📚</div>
                <div class="logo-text">
                    <div class="site-title">AnOpenVerseForEveryone</div>
                    <div class="site-subtitle">Поэтическая платформа</div>
                </div>
            </div>
            
            <nav class="main-nav">
                <button class="nav-btn active" onclick="Navigation.showHome()">
                    🏠 Главная
                </button>
                <button class="nav-btn" onclick="Navigation.showAllPoems()">
                    📚 Все стихи
                </button>
                <button class="nav-btn" onclick="Navigation.showAllAuthors()">
                    👥 Авторы
                </button>
                <button class="nav-btn" onclick="Navigation.showMyPoems()" id="myPoemsBtn" style="display: none;">
                    📖 Мои стихи
                </button>
                <button class="nav-btn" onclick="Navigation.showAddPoem()" id="addPoemBtn" style="display: none;">
                    ✏️ Добавить стих
                </button>
                <button class="nav-btn" onclick="Navigation.showSync()" id="syncBtn">
                    🔄 Синхронизация
                </button>
                
                <div class="user-menu">
                    <button class="nav-btn" onclick="Navigation.showLogin()" id="loginBtn">
                        🔑 Войти
                    </button>
                    <div class="user-avatar" id="userAvatar" style="display: none;" onclick="UserMenu.toggle()">
                        U
                        <div class="user-rating" id="userRating">0</div>
                    </div>
                </div>
            </nav>
        </div>
    </header>

    <!-- Основной контент -->
    <div class="main-container">
        <!-- Главная страница -->
        <section id="homeSection" class="content-section active">
            <div style="background: linear-gradient(135deg, var(--secondary-color), #2980b9); color: white; padding: 60px 40px; text-align: center;">
                <h1 style="font-size: 3em; margin-bottom: 20px;">AnOpenVerseForEveryone</h1>
                <p style="font-size: 1.3em; opacity: 0.9; max-width: 800px; margin: 0 auto; line-height: 1.6;">
                    Открытая платформа для поэтов и ценителей поэзии. Публикуйте стихи, 
                    находите читателей, поднимайтесь в рейтинге и становитесь популярными!
                </p>
            </div>

            <!-- Топ авторов -->
            <h2 style="text-align: center; margin: 40px 0 20px; font-size: 2.5em; color: var(--primary-color);">
                🏆 Топ авторов
            </h2>
            <div class="top-authors" id="topAuthors">
                <!-- Топ авторы будут здесь -->
            </div>

            <h2 style="text-align: center; margin: 40px 0; font-size: 2.5em; color: var(--primary-color);">
                Новые стихи
            </h2>
            <div class="poems-grid" id="homePoems">
                <!-- Новые стихи будут здесь -->
            </div>

            <h2 style="text-align: center; margin: 40px 0; font-size: 2.5em; color: var(--primary-color);">
                Популярные авторы
            </h2>
            <div class="authors-grid" id="featuredAuthors">
                <!-- Авторы будут здесь -->
            </div>
        </section>

        <!-- Все стихи -->
        <section id="poemsSection" class="content-section">
            <h2 style="text-align: center; margin: 40px 0; font-size: 2.5em; color: var(--primary-color);">
                Все стихотворения
            </h2>
            <div class="poems-grid" id="allPoems">
                <!-- Все стихи будут здесь -->
            </div>
        </section>

        <!-- Все авторы -->
        <section id="authorsSection" class="content-section">
            <h2 style="text-align: center; margin: 40px 0; font-size: 2.5em; color: var(--primary-color);">
                Сообщество авторов
            </h2>
            <div class="authors-grid" id="allAuthors">
                <!-- Все авторы будут здесь -->
            </div>
        </section>

        <!-- Мои стихи -->
        <section id="myPoemsSection" class="content-section">
            <div class="my-poems-section">
                <div class="my-poems-header">
                    <h2 style="font-size: 2.5em; color: var(--primary-color);">Мои стихи</h2>
                    <button class="btn btn-success" onclick="Navigation.showAddPoem()">
                        ✏️ Добавить новое стихотворение
                    </button>
                </div>
                <div class="poems-grid" id="myPoems">
                    <!-- Мои стихи будут здесь -->
                </div>
            </div>
        </section>

        <!-- Добавление стиха -->
        <section id="addPoemSection" class="content-section">
            <div class="auth-form">
                <h2 class="form-title" id="addPoemTitle">Добавить новое стихотворение</h2>
                <form id="addPoemForm">
                    <div class="form-group">
                        <label class="form-label">Название</label>
                        <input type="text" class="form-input" id="poemTitle" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Текст стихотворения</label>
                        <textarea class="form-input" id="poemContent" rows="10" required style="resize: vertical;"></textarea>
                    </div>
                    <div class="form-group" style="display: none;" id="editPoemIdField">
                        <input type="hidden" id="editPoemId">
                    </div>
                    <div style="display: flex; gap: 15px;">
                        <button type="submit" class="btn btn-success" style="flex: 1;">Опубликовать стих</button>
                        <button type="button" class="btn" onclick="Navigation.showMyPoems()" style="flex: 1;">Отмена</button>
                    </div>
                </form>
            </div>
        </section>

        <!-- Синхронизация -->
        <section id="syncSection" class="content-section">
            <div class="sync-section">
                <h2 style="text-align: center; margin-bottom: 40px; font-size: 2.5em; color: var(--primary-color);">
                    🔄 Синхронизация данных
                </h2>
                <p style="text-align: center; font-size: 1.2em; color: #666; max-width: 800px; margin: 0 auto 40px;">
                    Синхронизируйте ваши стихи между устройствами. Экспортируйте данные с одного устройства 
                    и импортируйте на другом, чтобы всегда иметь доступ ко всем вашим произведениям.
                </p>

                <div class="sync-options">
                    <div class="sync-card">
                        <div class="sync-icon">📤</div>
                        <h3 style="color: var(--primary-color); margin-bottom: 15px;">Экспорт данных</h3>
                        <p class="sync-description">
                            Скачайте файл со всеми вашими стихами и данными авторов. 
                            Сохраните этот файл для переноса на другое устройство.
                        </p>
                        <button class="btn btn-success" onclick="SyncManager.exportData()" style="width: 100%; margin-top: 20px;">
                            📥 Экспортировать все данные
                        </button>
                    </div>

                    <div class="sync-card">
                        <div class="sync-icon">📥</div>
                        <h3 style="color: var(--primary-color); margin-bottom: 15px;">Импорт данных</h3>
                        <p class="sync-description">
                            Загрузите ранее экспортированный файл, чтобы восстановить 
                            все стихи и данные авторов на этом устройстве.
                        </p>
                        <button class="btn btn-info" onclick="SyncManager.importData()" style="width: 100%; margin-top: 20px;">
                            📤 Импортировать данные
                        </button>
                    </div>

                    <div class="sync-card">
                        <div class="sync-icon">🌐</div>
                        <h3 style="color: var(--primary-color); margin-bottom: 15px;">Облачная синхронизация</h3>
                        <p class="sync-description">
                            Используйте Google Drive или Dropbox для автоматической 
                            синхронизации ваших данных между устройствами.
                        </p>
                        <button class="btn btn-warning" onclick="SyncManager.showCloudSyncInfo()" style="width: 100%; margin-top: 20px;">
                            ☁️ Инструкция по синхронизации
                        </button>
                    </div>
                </div>

                <div style="background: var(--light-bg); padding: 30px; border-radius: 15px; margin-top: 40px;">
                    <h3 style="color: var(--primary-color); margin-bottom: 20px;">📊 Статистика данных</h3>
                    <div id="syncStats" style="text-align: left;">
                        <!-- Статистика будет здесь -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Форма входа -->
        <section id="loginSection" class="content-section">
            <div class="auth-form">
                <h2 class="form-title">Вход в аккаунт</h2>
                <form id="loginForm">
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="loginEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Пароль</label>
                        <input type="password" class="form-input" id="loginPassword" required>
                    </div>
                    <button type="submit" class="btn">Войти</button>
                </form>
                <div class="form-footer">
                    <span>Нет аккаунта? </span>
                    <span class="form-link" onclick="Navigation.showRegister()">Зарегистрироваться</span>
                </div>
            </div>
        </section>

        <!-- Форма регистрации -->
        <section id="registerSection" class="content-section">
            <div class="auth-form">
                <h2 class="form-title">Регистрация</h2>
                <form id="registerForm">
                    <div class="form-group">
                        <label class="form-label">Имя и фамилия</label>
                        <input type="text" class="form-input" id="registerName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="registerEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Пароль</label>
                        <input type="password" class="form-input" id="registerPassword" required minlength="6">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Дата рождения</label>
                        <input type="date" class="form-input" id="registerBirthdate" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Краткая биография</label>
                        <textarea class="form-input" id="registerBio" rows="4" placeholder="Расскажите немного о себе..."></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Зарегистрироваться</button>
                </form>
                <div class="form-footer">
                    <span>Уже есть аккаунт? </span>
                    <span class="form-link" onclick="Navigation.showLogin()">Войти</span>
                </div>
            </div>
        </section>
    </div>

    <!-- Модальное окно для стиха -->
    <div class="modal" id="poemModal">
        <div class="modal-content">
            <span class="close-modal" onclick="Modal.close()">&times;</span>
            <h2 class="full-poem-title" id="modalTitle"></h2>
            <div class="poem-author-full" id="modalAuthor"></div>
            <div class="full-poem-content" id="modalContent"></div>
            
            <div class="poem-popularity" id="poemPopularity">
                <!-- Статистика популярности -->
            </div>
            
            <div class="full-poem-date" id="modalDate"></div>
        </div>
    </div>

    <!-- Подвал -->
    <footer class="site-footer">
        <div class="footer-text">
            <p>© 2024 AnOpenVerseForEveryone. Поэтическая платформа.</p>
            <p style="margin-top: 10px; font-size: 0.8em;">Используйте синхронизацию для доступа к стихам с разных устройств!</p>
        </div>
    </footer>

    <script>
        // ==================== КЛАСС ДЛЯ СИНХРОНИЗАЦИИ ДАННЫХ ====================
        class SyncManager {
            static exportData() {
                try {
                    const data = {
                        platform: 'AnOpenVerseForEveryone',
                        version: '1.0',
                        exportDate: new Date().toISOString(),
                        users: DataManager.getUsers(),
                        poems: DataManager.getPoems(),
                        statistics: {
                            totalUsers: DataManager.getUsers().length,
                            totalPoems: DataManager.getPoems().length,
                            totalReaders: DataManager.getPoems().reduce((sum, poem) => sum + (poem.readers || 0), 0)
                        }
                    };

                    const dataStr = JSON.stringify(data, null, 2);
                    const blob = new Blob([dataStr], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `poetry_platform_backup_${new Date().toISOString().split('T')[0]}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    Notifications.show('Данные успешно экспортированы!', 'success');
                    
                    // Обновляем статистику
                    this.updateSyncStats();
                    
                } catch (error) {
                    console.error('Ошибка экспорта:', error);
                    Notifications.show('Ошибка при экспорте данных', 'error');
                }
            }

            static importData() {
                try {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = '.json';
                    input.style.display = 'none';
                    
                    input.onchange = (e) => {
                        const file = e.target.files[0];
                        if (!file) return;

                        const reader = new FileReader();
                        reader.onload = (event) => {
                            try {
                                const data = JSON.parse(event.target.result);
                                
                                if (data.platform !== 'AnOpenVerseForEveryone') {
                                    throw new Error('Неверный формат файла');
                                }

                                if (confirm(`Найдено: ${data.statistics?.totalUsers || 0} пользователей и ${data.statistics?.totalPoems || 0} стихов. Импортировать данные?`)) {
                                    // Сохраняем новые данные
                                    DataManager.saveUsers(data.users || []);
                                    DataManager.savePoems(data.poems || []);
                                    
                                    // Обновляем текущее приложение
                                    PoetryPlatform.users = DataManager.getUsers();
                                    PoetryPlatform.poems = DataManager.getPoems();
                                    
                                    // Перерисовываем весь контент
                                    PoetryPlatform.renderHomeContent();
                                    PoetryPlatform.renderAllPoems();
                                    PoetryPlatform.renderAllAuthors();
                                    PoetryPlatform.renderMyPoems();
                                    UserMenu.updateUI();
                                    
                                    Notifications.show(`Данные успешно импортированы!`, 'success');
                                    this.updateSyncStats();
                                    
                                    // Возвращаем на главную
                                    Navigation.showHome();
                                }
                            } catch (error) {
                                console.error('Ошибка импорта:', error);
                                Notifications.show('Ошибка: неверный формат файла', 'error');
                            }
                        };
                        
                        reader.readAsText(file);
                    };
                    
                    document.body.appendChild(input);
                    input.click();
                    setTimeout(() => {
                        if (document.body.contains(input)) {
                            document.body.removeChild(input);
                        }
                    }, 1000);
                    
                } catch (error) {
                    console.error('Ошибка импорта:', error);
                    Notifications.show('Ошибка при импорте данных', 'error');
                }
            }

            static showCloudSyncInfo() {
                const info = `
                    <h3 style="color: var(--primary-color); margin-bottom: 20px;">☁️ Облачная синхронизация</h3>
                    <div style="text-align: left; line-height: 1.6;">
                        <p><strong>Для синхронизации между устройствами:</strong></p>
                        <ol style="margin-left: 20px; margin-bottom: 20px;">
                            <li>На основном устройстве экспортируйте данные (кнопка "Экспортировать все данные")</li>
                            <li>Сохраните файл в облачное хранилище (Google Drive, Dropbox, Yandex Disk)</li>
                            <li>На дополнительном устройстве скачайте файл из облака</li>
                            <li>Импортируйте данные (кнопка "Импортировать данные")</li>
                            <li>Повторяйте процесс при добавлении новых стихов</li>
                        </ol>
                        <p><strong>Совет:</strong> Регулярно экспортируйте данные для создания резервных копий!</p>
                    </div>
                `;
                
                alert(info);
            }

            static updateSyncStats() {
                const container = document.getElementById('syncStats');
                if (!container) return;

                const users = DataManager.getUsers();
                const poems = DataManager.getPoems();
                const totalReaders = poems.reduce((sum, poem) => sum + (poem.readers || 0), 0);
                
                container.innerHTML = `
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 20px;">
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: bold; color: var(--secondary-color);">${users.length}</div>
                            <div style="color: #666;">пользователей</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: bold; color: var(--success-color);">${poems.length}</div>
                            <div style="color: #666;">стихотворений</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: bold; color: var(--gold-color);">${totalReaders}</div>
                            <div style="color: #666;">всего прочтений</div>
                        </div>
                    </div>
                    <div style="background: white; padding: 15px; border-radius: 10px; border-left: 4px solid var(--secondary-color);">
                        <strong>Последняя синхронизация:</strong> ${new Date().toLocaleString('ru-RU')}
                    </div>
                `;
            }
        }

        // ==================== КЛАСС ДЛЯ УПРАВЛЕНИЯ ДАННЫМИ ====================
        class DataManager {
            static loadData(key) {
                try {
                    const saved = localStorage.getItem(key);
                    return saved ? JSON.parse(saved) : null;
                } catch (error) {
                    console.error('Ошибка загрузки данных:', error);
                    return null;
                }
            }

            static saveData(key, data) {
                try {
                    localStorage.setItem(key, JSON.stringify(data));
                } catch (error) {
                    console.error('Ошибка сохранения данных:', error);
                }
            }

            static getUsers() {
                return this.loadData('poetryUsers') || [];
            }

            static getPoems() {
                return this.loadData('poetryPoems') || [];
            }

            static getCurrentUser() {
                return this.loadData('currentUser') || null;
            }

            static saveUsers(users) {
                this.saveData('poetryUsers', users);
            }

            static savePoems(poems) {
                this.saveData('poetryPoems', poems);
            }

            static saveCurrentUser(user) {
                this.saveData('currentUser', user);
            }
        }

        // ==================== КЛАСС ДЛЯ УПРАВЛЕНИЯ НАВИГАЦИЕЙ ====================
        class Navigation {
            static showSection(sectionName) {
                document.querySelectorAll('.content-section').forEach(section => {
                    section.classList.remove('active');
                });
                
                document.querySelectorAll('.nav-btn').forEach(btn => {
                    btn.classList.remove('active');
                });

                document.getElementById(sectionName + 'Section').classList.add('active');
            }

            static activateNavButton(buttonText) {
                document.querySelectorAll('.nav-btn').forEach(btn => {
                    if (btn.textContent.includes(buttonText)) {
                        btn.classList.add('active');
                    }
                });
            }

            static showHome() {
                this.showSection('home');
                this.activateNavButton('Главная');
                PoetryPlatform.renderHomeContent();
            }

            static showAllPoems() {
                this.showSection('poems');
                this.activateNavButton('Все стихи');
                PoetryPlatform.renderAllPoems();
            }

            static showAllAuthors() {
                this.showSection('authors');
                this.activateNavButton('Авторы');
                PoetryPlatform.renderAllAuthors();
            }

            static showMyPoems() {
                if (!PoetryPlatform.currentUser) {
                    this.showLogin();
                    return;
                }
                this.showSection('myPoems');
                this.activateNavButton('Мои стихи');
                PoetryPlatform.renderMyPoems();
            }

            static showAddPoem(poemId = null) {
                if (!PoetryPlatform.currentUser) {
                    this.showLogin();
                    return;
                }
                this.showSection('addPoem');
                this.activateNavButton('Добавить стих');
                PoetryPlatform.prepareAddPoemForm(poemId);
            }

            static showSync() {
                this.showSection('sync');
                this.activateNavButton('Синхронизация');
                SyncManager.updateSyncStats();
            }

            static showLogin() {
                this.showSection('login');
                this.activateNavButton('Войти');
            }

            static showRegister() {
                this.showSection('register');
            }
        }

        // Остальные классы (Modal, UserMenu, Notifications, PoetryPlatform) остаются без изменений
        // ==================== КЛАСС ДЛЯ УПРАВЛЕНИЯ МОДАЛЬНЫМИ ОКНАМИ ====================
        class Modal {
            static open() {
                document.getElementById('poemModal').classList.add('active');
            }

            static close() {
                document.getElementById('poemModal').classList.remove('active');
            }

            static setupCloseHandlers() {
                document.getElementById('poemModal').addEventListener('click', function(e) {
                    if (e.target === this) {
                        Modal.close();
                    }
                });

                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        Modal.close();
                    }
                });
            }
        }

        // ==================== КЛАСС ДЛЯ УПРАВЛЕНИЯ ПОЛЬЗОВАТЕЛЕМ ====================
        class UserMenu {
            static toggle() {
                if (confirm('Вы хотите выйти из аккаунта?')) {
                    PoetryPlatform.logout();
                }
            }

            static updateUI() {
                const loginBtn = document.getElementById('loginBtn');
                const userAvatar = document.getElementById('userAvatar');
                const userRating = document.getElementById('userRating');
                const addPoemBtn = document.getElementById('addPoemBtn');
                const myPoemsBtn = document.getElementById('myPoemsBtn');

                if (PoetryPlatform.currentUser) {
                    loginBtn.style.display = 'none';
                    userAvatar.style.display = 'flex';
                    addPoemBtn.style.display = 'flex';
                    myPoemsBtn.style.display = 'flex';
                    userAvatar.textContent = PoetryPlatform.currentUser.name.split(' ').map(n => n[0]).join('');
                    userAvatar.style.background = PoetryPlatform.currentUser.avatarColor;
                    userRating.textContent = PoetryPlatform.currentUser.popularity || 0;
                } else {
                    loginBtn.style.display = 'flex';
                    userAvatar.style.display = 'none';
                    addPoemBtn.style.display = 'none';
                    myPoemsBtn.style.display = 'none';
                }
            }
        }

        // ==================== КЛАСС ДЛЯ УВЕДОМЛЕНИЙ ====================
        class Notifications {
            static show(message, type = 'success') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        }

        // ==================== ОСНОВНОЙ КЛАСС ПЛАТФОРМЫ ====================
        class PoetryPlatform {
            static init() {
                this.users = DataManager.getUsers();
                this.poems = DataManager.getPoems();
                this.currentUser = DataManager.getCurrentUser();
                this.editingPoemId = null;
                
                this.setupEventListeners();
                Modal.setupCloseHandlers();
                UserMenu.updateUI();
                Navigation.showHome();
                
                // Показываем уведомление о синхронизации при первом запуске
                this.showSyncNotification();
            }

            static showSyncNotification() {
                const hasData = this.users.length > 0 || this.poems.length > 0;
                if (hasData) {
                    Notifications.show('💡 Используйте синхронизацию для доступа к данным с других устройств!', 'info');
                }
            }

            // Остальные методы PoetryPlatform остаются без изменений
            static setupEventListeners() {
                document.getElementById('registerForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleRegistration();
                });

                document.getElementById('loginForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleLogin();
                });

                document.getElementById('addPoemForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleAddPoem();
                });
            }

            static handleRegistration() {
                const name = document.getElementById('registerName').value;
                const email = document.getElementById('registerEmail').value;
                const password = document.getElementById('registerPassword').value;
                const birthdate = document.getElementById('registerBirthdate').value;
                const bio = document.getElementById('registerBio').value;

                if (this.users.find(user => user.email === email)) {
                    Notifications.show('Пользователь с таким email уже существует', 'error');
                    return;
                }

                const user = {
                    id: Date.now(),
                    name: name,
                    email: email,
                    password: password,
                    birthdate: birthdate,
                    bio: bio || 'Автор пока не добавил информацию о себе.',
                    registrationDate: new Date().toISOString(),
                    avatarColor: this.getRandomColor(),
                    popularity: 0,
                    totalReaders: 0
                };

                this.users.push(user);
                DataManager.saveUsers(this.users);
                
                Notifications.show('Регистрация успешна! Теперь войдите в аккаунт.');
                Navigation.showLogin();
            }

            static handleLogin() {
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;

                const user = this.users.find(u => u.email === email && u.password === password);
                
                if (user) {
                    this.currentUser = user;
                    DataManager.saveCurrentUser(user);
                    UserMenu.updateUI();
                    Notifications.show(`Добро пожаловать, ${user.name}!`);
                    Navigation.showHome();
                } else {
                    Notifications.show('Неверный email или пароль', 'error');
                }
            }

            static handleAddPoem() {
                if (!this.currentUser) {
                    Notifications.show('Для добавления стихов нужно войти в аккаунт', 'error');
                    return;
                }

                const title = document.getElementById('poemTitle').value;
                const content = document.getElementById('poemContent').value;
                const editPoemId = document.getElementById('editPoemId').value;

                if (editPoemId) {
                    this.updatePoem(parseInt(editPoemId), title, content);
                } else {
                    this.createPoem(title, content);
                }
            }

            static createPoem(title, content) {
                const poem = {
                    id: Date.now(),
                    title: title,
                    content: content,
                    authorId: this.currentUser.id,
                    authorName: this.currentUser.name,
                    date: new Date().toLocaleDateString('ru-RU'),
                    timestamp: new Date().toISOString(),
                    readers: 0,
                    uniqueReaders: []
                };

                this.poems.unshift(poem);
                DataManager.savePoems(this.poems);
                
                this.resetAddPoemForm();
                this.renderHomeContent();
                this.renderAllPoems();
                this.renderMyPoems();
                Notifications.show('Стихотворение опубликовано!');
                Navigation.showMyPoems();
            }

            // ... остальные методы PoetryPlatform без изменений ...
            static updatePoem(poemId, title, content) {
                const poemIndex = this.poems.findIndex(p => p.id === poemId);
                
                if (poemIndex !== -1 && this.poems[poemIndex].authorId === this.currentUser.id) {
                    this.poems[poemIndex].title = title;
                    this.poems[poemIndex].content = content;
                    this.poems[poemIndex].date = new Date().toLocaleDateString('ru-RU') + ' (изменено)';
                    
                    DataManager.savePoems(this.poems);
                    
                    this.resetAddPoemForm();
                    this.renderHomeContent();
                    this.renderAllPoems();
                    this.renderMyPoems();
                    Notifications.show('Стихотворение обновлено!');
                    Navigation.showMyPoems();
                } else {
                    Notifications.show('Ошибка: нельзя редактировать чужое стихотворение', 'error');
                }
            }

            static deletePoem(poemId) {
                if (!confirm('Вы уверены, что хотите удалить это стихотворение?')) {
                    return;
                }

                const poemIndex = this.poems.findIndex(p => p.id === poemId);
                
                if (poemIndex !== -1 && this.poems[poemIndex].authorId === this.currentUser.id) {
                    const poem = this.poems[poemIndex];
                    const author = this.users.find(u => u.id === poem.authorId);
                    if (author) {
                        author.popularity = Math.max(0, author.popularity - poem.readers);
                        author.totalReaders = this.getAuthorTotalReaders(author.id);
                    }

                    this.poems.splice(poemIndex, 1);
                    DataManager.savePoems(this.poems);
                    DataManager.saveUsers(this.users);
                    
                    this.renderHomeContent();
                    this.renderAllPoems();
                    this.renderMyPoems();
                    UserMenu.updateUI();
                    Notifications.show('Стихотворение удалено');
                } else {
                    Notifications.show('Ошибка: нельзя удалить чужое стихотворение', 'error');
                }
            }

            static prepareAddPoemForm(poemId = null) {
                this.editingPoemId = poemId;
                const formTitle = document.getElementById('addPoemTitle');
                const editField = document.getElementById('editPoemIdField');
                const poemIdInput = document.getElementById('editPoemId');
                const titleInput = document.getElementById('poemTitle');
                const contentInput = document.getElementById('poemContent');

                if (poemId) {
                    const poem = this.poems.find(p => p.id === poemId);
                    if (poem && poem.authorId === this.currentUser.id) {
                        formTitle.textContent = 'Редактировать стихотворение';
                        editField.style.display = 'block';
                        poemIdInput.value = poemId;
                        titleInput.value = poem.title;
                        contentInput.value = poem.content;
                    } else {
                        Notifications.show('Нельзя редактировать чужое стихотворение', 'error');
                        Navigation.showMyPoems();
                    }
                } else {
                    formTitle.textContent = 'Добавить новое стихотворение';
                    editField.style.display = 'none';
                    poemIdInput.value = '';
                    titleInput.value = '';
                    contentInput.value = '';
                }
            }

            static resetAddPoemForm() {
                this.editingPoemId = null;
                document.getElementById('addPoemForm').reset();
                document.getElementById('editPoemIdField').style.display = 'none';
                document.getElementById('editPoemId').value = '';
            }

            static markAsRead(poemId) {
                if (!this.currentUser) return;

                const poem = this.poems.find(p => p.id === poemId);
                if (!poem) return;

                if (!poem.uniqueReaders.includes(this.currentUser.id)) {
                    poem.uniqueReaders.push(this.currentUser.id);
                    poem.readers = poem.uniqueReaders.length;
                    
                    const author = this.users.find(u => u.id === poem.authorId);
                    if (author) {
                        author.popularity += 1;
                        author.totalReaders = this.getAuthorTotalReaders(author.id);
                    }

                    DataManager.savePoems(this.poems);
                    DataManager.saveUsers(this.users);
                    
                    Notifications.show('+1 к популярности автора!');
                }
            }

            static getAuthorTotalReaders(authorId) {
                const authorPoems = this.poems.filter(p => p.authorId === authorId);
                return authorPoems.reduce((total, poem) => total + poem.readers, 0);
            }

            static getTopAuthors(limit = 3) {
                return this.users
                    .filter(user => user.popularity > 0)
                    .sort((a, b) => b.popularity - a.popularity)
                    .slice(0, limit);
            }

            static renderHomeContent() {
                this.renderTopAuthors();
                this.renderRecentPoems();
                this.renderFeaturedAuthors();
            }

            static renderTopAuthors() {
                const container = document.getElementById('topAuthors');
                const topAuthors = this.getTopAuthors(3);
                
                if (topAuthors.length === 0) {
                    container.innerHTML = '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">Рейтинг авторов пока пуст</p>';
                    return;
                }

                const medals = ['🥇', '🥈', '🥉'];
                container.innerHTML = topAuthors.map((author, index) => {
                    const medal = medals[index] || '🏅';
                    const cardClass = index === 0 ? 'gold' : index === 1 ? 'silver' : 'bronze';
                    
                    return `
                        <div class="top-author-card ${cardClass}">
                            <div class="medal">${medal}</div>
                            <div class="author-avatar-small" style="background: ${author.avatarColor}; width: 60px; height: 60px; margin: 0 auto 10px;">
                                ${author.name.split(' ').map(n => n[0]).join('')}
                            </div>
                            <h3 style="color: var(--primary-color); margin-bottom: 10px;">${this.escapeHtml(author.name)}</h3>
                            <div class="rating-badge" style="margin: 0 auto;">
                                👥 ${author.popularity} читателей
                            </div>
                            <div style="margin-top: 10px; color: #7f8c8d; font-size: 0.9em;">
                                ${this.getAuthorPoemsCount(author.id)} стихов
                            </div>
                        </div>
                    `;
                }).join('');
            }

            static renderRecentPoems() {
                const container = document.getElementById('homePoems');
                const recentPoems = this.poems.slice(0, 6);
                
                container.innerHTML = recentPoems.length ? 
                    recentPoems.map(poem => this.createPoemCard(poem, false)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">Пока нет стихов</p>';
            }

            static renderFeaturedAuthors() {
                const container = document.getElementById('featuredAuthors');
                const authorsWithStats = this.getAuthorsWithStats()
                    .filter(author => author.popularity > 0)
                    .slice(0, 6);
                
                container.innerHTML = authorsWithStats.length ?
                    authorsWithStats.map(author => this.createAuthorCard(author)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">Пока нет популярных авторов</p>';
            }

            static renderAllPoems() {
                const container = document.getElementById('allPoems');
                container.innerHTML = this.poems.length ? 
                    this.poems.map(poem => this.createPoemCard(poem, false)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">Пока нет стихов</p>';
            }

            static renderAllAuthors() {
                const container = document.getElementById('allAuthors');
                const authors = this.getAuthorsWithStats()
                    .sort((a, b) => b.popularity - a.popularity);
                
                container.innerHTML = authors.length ?
                    authors.map((author, index) => this.createAuthorCard(author, index + 1)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">Пока нет авторов</p>';
            }

            static renderMyPoems() {
                if (!this.currentUser) return;
                
                const container = document.getElementById('myPoems');
                const myPoems = this.poems.filter(poem => poem.authorId === this.currentUser.id);
                
                container.innerHTML = myPoems.length ? 
                    myPoems.map(poem => this.createPoemCard(poem, true)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">У вас пока нет стихов. Добавьте первое!</p>';
            }

            static createPoemCard(poem, showActions = false) {
                const author = this.users.find(u => u.id === poem.authorId);
                const initials = author ? author.name.split(' ').map(n => n[0]).join('') : 'A';
                const isRead = this.currentUser && poem.uniqueReaders.includes(this.currentUser.id);
                const isMyPoem = this.currentUser && poem.authorId === this.currentUser.id;
                
                return `
                    <div class="poem-card" onclick="PoetryPlatform.showPoem(${poem.id})">
                        <div class="poem-author">
                            <div class="author-avatar-small" style="background: ${author?.avatarColor || '#3498db'}">
                                ${initials}
                            </div>
                            ${poem.authorName}
                            ${author?.popularity > 0 ? `
                                <span class="rating-badge" style="margin-left: auto;">
                                    👥 ${author.popularity}
                                </span>
                            ` : ''}
                        </div>
                        <h3 class="poem-title">${this.escapeHtml(poem.title)}</h3>
                        <div class="poem-preview">${this.escapeHtml(poem.content)}</div>
                        <div class="poem-meta">
                            <div class="poem-stats">
                                <span class="stat-item">
                                    👁️ ${poem.readers || 0}
                                </span>
                                ${isRead ? '<span class="stat-item">✅ Прочитано</span>' : ''}
                            </div>
                            <span class="poem-date">${poem.date}</span>
                        </div>
                        ${showActions && isMyPoem ? `
                            <div class="poem-actions">
                                <button class="btn btn-warning btn-small" onclick="event.stopPropagation(); PoetryPlatform.editPoem(${poem.id})">
                                    ✏️ Редактировать
                                </button>
                                <button class="btn btn-danger btn-small" onclick="event.stopPropagation(); PoetryPlatform.deletePoem(${poem.id})">
                                    🗑️ Удалить
                                </button>
                            </div>
                        ` : ''}
                    </div>
                `;
            }

            static createAuthorCard(author, rank = null) {
                const age = this.calculateAge(author.birthdate);
                const initials = author.name.split(' ').map(n => n[0]).join('');
                
                return `
                    <div class="author-card" onclick="PoetryPlatform.showAuthorPoems(${author.id})">
                        ${rank ? `<div class="author-rank">${rank}</div>` : ''}
                        <div class="author-avatar" style="background: ${author.avatarColor}">
                            ${initials}
                            <div class="author-popularity">
                                ${author.popularity}
                            </div>
                        </div>
                        <h3 class="author-name">${this.escapeHtml(author.name)}</h3>
                        <div class="author-stats">
                            <span>${author.poemsCount} стихов</span>
                            <span>${age} лет</span>
                        </div>
                        <div class="rating-stats">
                            <span class="stat-item">
                                👥 ${author.totalReaders} всего читателей
                            </span>
                        </div>
                        <div class="author-bio">${this.escapeHtml(author.bio)}</div>
                        <div style="color: #7f8c8d; font-size: 0.9em;">
                            Популярность: ${author.popularity} баллов
                        </div>
                    </div>
                `;
            }

            static getAuthorsWithStats() {
                return this.users.map(user => {
                    return {
                        ...user,
                        poemsCount: this.getAuthorPoemsCount(user.id),
                        popularity: user.popularity || 0,
                        totalReaders: this.getAuthorTotalReaders(user.id)
                    };
                }).filter(author => author.poemsCount > 0);
            }

            static getAuthorPoemsCount(authorId) {
                return this.poems.filter(poem => poem.authorId === authorId).length;
            }

            static showPoem(poemId) {
                const poem = this.poems.find(p => p.id === poemId);
                if (!poem) return;

                const author = this.users.find(u => u.id === poem.authorId);
                const initials = author ? author.name.split(' ').map(n => n[0]).join('') : 'A';

                this.markAsRead(poemId);

                document.getElementById('modalTitle').textContent = poem.title;
                document.getElementById('modalAuthor').innerHTML = `
                    <div class="author-avatar-small" style="background: ${author?.avatarColor || '#3498db'}">
                        ${initials}
                    </div>
                    ${poem.authorName}
                    ${author?.popularity > 0 ? `
                        <span class="rating-badge">
                            👥 ${author.popularity}
                        </span>
                    ` : ''}
                `;
                document.getElementById('modalContent').textContent = poem.content;
                
                document.getElementById('poemPopularity').innerHTML = `
                    <div style="text-align: center;">
                        <div style="font-size: 1.2em; font-weight: bold; color: var(--primary-color); margin-bottom: 10px;">
                            📊 Статистика
                        </div>
                        <div style="display: flex; justify-content: center; gap: 30px;">
                            <div>
                                <div style="font-size: 1.5em; font-weight: bold; color: var(--secondary-color);">
                                    ${poem.readers || 0}
                                </div>
                                <div style="font-size: 0.9em; color: #7f8c8d;">читателей</div>
                            </div>
                            <div>
                                <div style="font-size: 1.5em; font-weight: bold; color: var(--gold-color);">
                                    ${author?.popularity || 0}
                                </div>
                                <div style="font-size: 0.9em; color: #7f8c8d;">популярность автора</div>
                            </div>
                        </div>
                        ${this.currentUser && poem.uniqueReaders.includes(this.currentUser.id) ? 
                            '<div style="margin-top: 10px; color: var(--success-color);">✅ Вы увеличили популярность автора!</div>' : 
                            '<div style="margin-top: 10px; color: var(--secondary-color);">👆 Прочитайте стих, чтобы +1 к популярности автора</div>'
                        }
                    </div>
                `;
                
                document.getElementById('modalDate').textContent = `Опубликовано: ${poem.date}`;
                Modal.open();

                this.renderHomeContent();
                this.renderAllPoems();
                this.renderMyPoems();
            }

            static showAuthorPoems(authorId) {
                const authorPoems = this.poems.filter(poem => poem.authorId === authorId);
                const container = document.getElementById('allPoems');
                
                container.innerHTML = authorPoems.length ? 
                    authorPoems.map(poem => this.createPoemCard(poem, false)).join('') :
                    '<p style="text-align: center; grid-column: 1/-1; color: #7f8c8d;">У этого автора пока нет стихов</p>';
                
                Navigation.showAllPoems();
            }

            static editPoem(poemId) {
                Navigation.showAddPoem(poemId);
            }

            static logout() {
                this.currentUser = null;
                DataManager.saveCurrentUser(null);
                UserMenu.updateUI();
                Notifications.show('Вы вышли из аккаунта');
                Navigation.showHome();
            }

            static calculateAge(birthdate) {
                if (!birthdate) return '?';
                const birth = new Date(birthdate);
                const today = new Date();
                let age = today.getFullYear() - birth.getFullYear();
                const monthDiff = today.getMonth() - birth.getMonth();
                
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                    age--;
                }
                return age;
            }

            static getRandomColor() {
                const colors = ['#3498db', '#e74c3c', '#27ae60', '#9b59b6', '#e67e22', '#1abc9c'];
                return colors[Math.floor(Math.random() * colors.length)];
            }

            static escapeHtml(text) {
                if (!text) return '';
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        }

        // ==================== ИНИЦИАЛИЗАЦИЯ ПРИЛОЖЕНИЯ ====================
        document.addEventListener('DOMContentLoaded', () => {
            PoetryPlatform.init();
        });
    </script>
</body>
</html>
